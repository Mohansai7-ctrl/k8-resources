# steps:
# create efs filesystem and update this id in volumeHandle in static and fileSystemId in efs-sc.yaml
# install efs csi drivers and then in that default sg allow 2049 port nfs from ec2 instance sg grps
# in ec2 instance sg grp, open 30007 nodePort for all traffic
# allow efs csi driver policy in iam role
# create pv for static and pvc for static and only pvc for dynamic keeping filesystem alive, unlike deleting(not required) in ebs dynamic provisioning
# pod and service creation
#efs csi driver:
# https://github.com/kubernetes-sigs/aws-efs-csi-driver/tree/master/examples/kubernetes

# #installing efs-csi driver:
# kubectl kustomize \
#     "github.com/kubernetes-sigs/aws-efs-csi-driver/deploy/kubernetes/overlays/stable/?ref=release-2.1" > public-ecr-driver.yaml

# after running the above command, apply as:
# kubectl apply -f public-ecr-driver.yaml ,, then efs csi drivers will be created and installed successfully 

#1) PV Creation
apiVersion: v1
kind: PersistentVolume
metadata:
  name: efs-static
spec:
  accessModes: [ "ReadWriteOnce" ]
  capacity:
    storage: 5Gi
  csi:
    driver: efs.csi.aws.com
    volumeHandle: fs-0a9fdcb2595138329  #efs File System name created in aws efs
  volumeMode: Filesystem
  persistentVolumeReclaimPolicy: Retain
  storageClassName: ""
---
#2) pvc creation: 
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: efs-static
spec:
  volumeName: efs-static
  accessModes:
    - ReadWriteOnce
  storageClassName: ""
  resources:
    requests:
      storage: 3Gi

---
#3) pod creation:
apiVersion: v1
kind: Pod
metadata:
  name: efs-static
  labels:
    purpose: efs-static
spec:
  
  containers:
  - name: nginx
    image: nginx
    volumeMounts:
    - name: efs-static
      mountPath: /usr/share/nginx/html
  volumes:
  - name: efs-static
    persistentVolumeClaim:
      claimName: efs-static
    
---
#4)service creation for the pod:
apiVersion: v1
kind: Service
metadata:
  name: nginx-svc
spec:
  selector:
    purpose: efs-static
  type: LoadBalancer
  ports:
  - name: nginx-svc-port
    protocol: TCP
    port: 80   #service Port
    targetPort: 80  #ContainerPort
    nodePort: 30007   # Worker Node

    